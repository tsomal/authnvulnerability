package valueobjects;

/**
 * Created by tsomal on 2/22/21.
 */


import lombok.Getter;
import lombok.Setter;

import lombok.EqualsAndHashCode;
import lombok.ToString;
import org.apache.commons.lang3.builder.ToStringBuilder;
import org.apache.commons.lang3.builder.ToStringStyle;

@EqualsAndHashCode(onlyExplicitlyIncluded = true)
@Getter
@Setter
@ToString
public class VRow {

    @EqualsAndHashCode.Include
    String findingId;

    @EqualsAndHashCode.Include
    String deviceId;

    String serverId;
    String serviceName;
    String serviceOwner;
    // String featureId;

    // ALL AC findings
    String program;
    String executive;
    String esfService;
    String esfServiceOwner;

    String hostOperatingSystem;
    String hostDNSName;

    String findingName;
    String findingStatus;
    String findingSeverity;
    String hostIPAddress;
    String networkPort;
    String firstPublished;
    String findingDueDate;
    String vulnerabilityAge;
    String daysOverdue;
    String findindOverdue;
    String overdueScore;
    String findingEvidence;
    String location;
    String env;
    String featureId;
    String dateSubmitted;
    String comments;


    private void append( ToStringBuilder sb, String k, String va) {
        if (va == null || va.isEmpty())
            return;
        sb.append(k, va);
    }
    public String toString() {

        ToStringBuilder sb = new ToStringBuilder(this, ToStringStyle.SHORT_PREFIX_STYLE);
        append(sb, "findingId", findingId);
        append(sb, "deviceId", deviceId);
        append(sb, "serverId", serverId);
        append(sb, "serviceName", serviceName);
        append(sb, "serviceOwner", serviceOwner);
        append(sb, "program", program);
        append(sb, "executive", executive);
        append(sb, "esfService", esfService);
        append(sb, "esfServiceOwner", esfServiceOwner);
        append(sb, "hostOperatingSystem", hostOperatingSystem);
        append(sb, "hostDNSName", hostDNSName);
        append(sb, "findingName", findingName);
        append(sb, "findingStatus", findingStatus);
        append(sb, "findingSeverity", findingSeverity);
        append(sb, "hostIPAddress", hostIPAddress);
        append(sb, "networkPort", networkPort);
        append(sb, "firstPublished", firstPublished);
        append(sb, "findingDueDate", findingDueDate);
        append(sb, "vulnerabilityAge", vulnerabilityAge);
        append(sb, "daysOverdue", daysOverdue);
        append(sb, "findindOverdue", findindOverdue);
        append(sb, "overdueScore", overdueScore);
        append(sb, "findingEvidence", findingEvidence);
        append(sb, "location", location);
        append(sb, "env", env);
        append(sb, "featureId", featureId);
        append(sb, "env", env);
        append(sb, "dateSubmitted", dateSubmitted);
        append(sb, "comments", comments);
        return sb.toString();


    }

}
