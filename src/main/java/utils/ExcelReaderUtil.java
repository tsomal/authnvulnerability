package utils;

import org.apache.commons.collections4.map.HashedMap;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellType;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import valueobjects.RowIndex;
import valueobjects.VRow;

import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import utils.*;

/**
 * Created by tsomal on 2/23/21.
 */
public class ExcelReaderUtil {

    public static Sheet getSheet( String excelFile, String sheetName) {
        Workbook vulnerabilities = ExcelFileUtil.getWorkBook(excelFile);
        List<String> sheetNames = ExcelFileUtil.getSheets(vulnerabilities);
        return vulnerabilities.getSheet(sheetName);

    }

    public static List<VRow> getAllRowsFromMasterMapper(String excelFile, String sh, String owner) {
        Sheet s = getSheet(excelFile, sh);

        System.out.println("The Sheet Name ### " + s.getSheetName());

        return getAllRowsFromMasterMapper(s);
    }

    private static List<VRow> getAllRowsFromMasterMapper( Sheet sh) {

        List<VRow> allRows = new LinkedList<VRow>();
        int rowCounts = sh.getPhysicalNumberOfRows();

        int SERVER_ID = 0,SERVICE_NAME = 1;

        for (int j = 1; j < rowCounts; j++) {
            String serverId = getCellValue(sh.getRow(j).getCell(SERVER_ID));
            String serviceName = getCellValue(sh.getRow(j).getCell(SERVICE_NAME));


            VRow v = new VRow();

            v.setServerId(serverId);
            v.setServiceName(serviceName);

            allRows.add(v);

        }
        System.out.println(allRows);
        return allRows;
    }

//    public static Map<RowIndex, VRow> getAllRowsFromVulnerabilityMapper(String excelFile, String sh) {
//        Sheet sheetPO = getSheet(excelFile, sh);
//        return getAllRowsFromVulnerabilityMapper(sheetPO);
//    }





    private static Map<String, VRow> getAllRowsFromOwnerMapper( Sheet sh) {

        //Map<RowIndex, VRow> allRows = new HashedMap<RowIndex, VRow>();

        Map<String, VRow> allRows = new HashedMap<String, VRow>();

        int rowCounts = sh.getPhysicalNumberOfRows();

        int SCAN_ID =0, VULNERABILITY_ID = 1; int SERVER_ID = 2,SERVICE_NAME = 3,SERVICE_OWNER = 4,FEATURE_ID = 5;

        for (int j = 1; j < rowCounts; j++) {

            String scanId = getCellValue(sh.getRow(j).getCell(SCAN_ID));
            String vulnerabilityId = getCellValue(sh.getRow(j).getCell(VULNERABILITY_ID));
            String serverId = getCellValue(sh.getRow(j).getCell(SERVER_ID));
            String serviceName = getCellValue(sh.getRow(j).getCell(SERVICE_NAME));
            String serviceOwner = getCellValue(sh.getRow(j).getCell(SERVICE_OWNER));
            String featureId = getCellValue(sh.getRow(j).getCell(FEATURE_ID));
//
//            RowIndex k = new RowIndex();
//            k.setScanId(scanId);
//            k.setVulnerabilityId(vulnerabilityId);

            VRow v = new VRow();
            v.setScanId(scanId);
            v.setVulnerabilityId(vulnerabilityId);
            v.setServerId(serverId);
            v.setServiceName(serviceName);
            v.setServiceOwner(serviceOwner);
            v.setFeatureId(featureId);

            allRows.put(serviceOwner,v);

        }
        return allRows;
    }

    private static String getCellValue(Cell cell) {

        CellType cellType = cell.getCellType();

        switch (cellType)
        {
            case NUMERIC:
                return String.valueOf(cell.getNumericCellValue());
            case BOOLEAN:
                return String.valueOf(cell.getBooleanCellValue());
            case STRING:
                return cell.getStringCellValue();
            default:
                return "";
        }

    }

    public static List<VRow> getAllRowsFromVulnerabilityReport( String excelFile, String productOwner ) {
        Workbook vulnerabilities = ExcelFileUtil.getWorkBook(excelFile);
        List<String> sheetNames = ExcelFileUtil.getSheets(vulnerabilities);

        Sheet s = vulnerabilities.getSheet("Vulnerability");
        return getAllRowsFromVulnerabilitySheet( s);
    }

    private static List<VRow> getAllRowsFromVulnerabilitySheet( Sheet sh) {
        System.out.println(sh.getSheetName() + "ffffff");
        List<VRow> allRows = new LinkedList<VRow>();
        int rowCounts = sh.getPhysicalNumberOfRows();

        int SCAN_ID =0, VULNERABILITY_ID = 1; int SERVER_ID = 2,SERVICE_NAME = 3,SERVICE_OWNER = 4,FEATURE_ID = 5;

        for (int j = 1; j < rowCounts; j++) {

            String scanId = getCellValue(sh.getRow(j).getCell(SCAN_ID));
            String vulnerabilityId = getCellValue(sh.getRow(j).getCell(VULNERABILITY_ID));
            String serverId = getCellValue(sh.getRow(j).getCell(SERVER_ID));
            String serviceName = getCellValue(sh.getRow(j).getCell(SERVICE_NAME));
            String serviceOwner = getCellValue(sh.getRow(j).getCell(SERVICE_OWNER));
            String featureId = getCellValue(sh.getRow(j).getCell(FEATURE_ID));


            VRow v = new VRow();
            v.setScanId(scanId);
            v.setVulnerabilityId(vulnerabilityId);
            v.setServerId(serverId);
            v.setServiceName(serviceName);
            v.setServiceOwner(serviceOwner);
            v.setFeatureId(featureId);

            allRows.add(v);

        }
        return allRows;
    }
}
