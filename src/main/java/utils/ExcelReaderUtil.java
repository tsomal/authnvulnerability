package utils;

import org.apache.commons.collections4.map.HashedMap;
import org.apache.poi.ss.usermodel.*;
import valueobjects.ACFINDINGS;
import valueobjects.VRow;

import java.io.File;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

/**
 * Created by tsomal on 2/23/21.
 */
public class ExcelReaderUtil {

    public static Workbook getWorkBook( String fileName ) {
        String excelDir = System.getProperty("user.dir") + "//src//main//resources//exceldocs//";
        try {
            Workbook wb = WorkbookFactory.create(new File(excelDir + fileName));
            return wb;

        } catch (Exception ex) {
            throw new RuntimeException(ex);

        }
    }


    public static Sheet getSheet( Workbook wb, String sheetName ) {

        List<String> sheetNames = ExcelFileUtil.getSheets(wb);
        return wb.getSheet(sheetName);

    }


    @Deprecated
    public static List<VRow> getAllRowsFromMasterMapper( Workbook wb, String sh, String owner ) {
        Sheet s = getSheet(wb, sh);

        System.out.println("The Sheet Name ### " + s.getSheetName());

        List<VRow> allRows = getAllRowsFromMasterMapper(s);
        return allRows;
    }

    public static List<VRow> getAllRowsFromMasterMapper( Sheet sh ) {

        List<VRow> allRows = new LinkedList<VRow>();
        int rowCounts = sh.getPhysicalNumberOfRows();

        int DEVICE_ID = 0, SERVICE_NAME = 1, SERVICE_OWNER = 2;

        for (int j = 1; j < rowCounts; j++) {
            String deviceId = getCellValue(sh.getRow(j).getCell(DEVICE_ID));
            String serviceName = getCellValue(sh.getRow(j).getCell(SERVICE_NAME));
            String serviceOwner = getCellValue(sh.getRow(j).getCell(SERVICE_OWNER));


            VRow v = new VRow();

            v.setDeviceId(deviceId);
            v.setServiceName(serviceName);
            v.setServiceOwner(serviceOwner);

            allRows.add(v);

        }

        return allRows;
    }

//    public static Map<RowIndex, VRow> getAllRowsFromVulnerabilityMapper(String excelFile, String sh) {
//        Sheet sheetPO = getSheet(excelFile, sh);
//        return getAllRowsFromVulnerabilityMapper(sheetPO);
//    }


    private static Map<String, VRow> getAllRowsFromOwnerMapper( Sheet sh ) {

        //Map<RowIndex, VRow> allRows = new HashedMap<RowIndex, VRow>();

        Map<String, VRow> allRows = new HashedMap<String, VRow>();

        int rowCounts = sh.getPhysicalNumberOfRows();

        int SCAN_ID = 0, VULNERABILITY_ID = 1;
        int DEVICE_ID = 2, SERVICE_NAME = 3, SERVICE_OWNER = 4, FEATURE_ID = 5;

        for (int j = 1; j < rowCounts; j++) {

            String scanId = getCellValue(sh.getRow(j).getCell(SCAN_ID));
            String vulnerabilityId = getCellValue(sh.getRow(j).getCell(VULNERABILITY_ID));
            String deviceId = getCellValue(sh.getRow(j).getCell(DEVICE_ID));
            String serviceName = getCellValue(sh.getRow(j).getCell(SERVICE_NAME));
            String serviceOwner = getCellValue(sh.getRow(j).getCell(SERVICE_OWNER));
            String featureId = getCellValue(sh.getRow(j).getCell(FEATURE_ID));
//
//            RowIndex k = new RowIndex();
//            k.setScanId(scanId);
//            k.setVulnerabilityId(vulnerabilityId);

            VRow v = new VRow();
            v.setFindingId(scanId);
            v.setDeviceId(vulnerabilityId);
            v.setServerId(deviceId);
            v.setServiceName(serviceName);
            v.setServiceOwner(serviceOwner);
            v.setFeatureId(featureId);

            allRows.put(serviceOwner, v);

        }
        return allRows;
    }

    private static String getCellValue( Cell cell ) {

        CellType cellType = cell.getCellType();

        switch (cellType) {
            case NUMERIC:
                return String.valueOf(cell.getNumericCellValue());
            case BOOLEAN:
                return String.valueOf(cell.getBooleanCellValue());
            case STRING:
                return cell.getStringCellValue();
            default:
                //return "";
                return cell.getStringCellValue();
        }

    }

    public static List<VRow> getAllRowsFromVulnerabilityReport( Sheet s, String productOwner ) {

        return getAllRowsFromVulnerabilitySheet(s);
    }

//    @Deprecated
//    public static List<VRow> getAllRowsFromVulnerabilityReport( Workbook wb, String productOwner ) {
//        List<String> sheetNames = ExcelFileUtil.getSheets(wb);
//
//        Sheet s = wb.getSheet("Vulnerability");
//        return getAllRowsFromVulnerabilitySheet(s);
//    }

    public static List<VRow> getAllRowsFromVulnerabilitySheet( Sheet sh ) {

        List<VRow> allRows = new LinkedList<VRow>();
        int rowCounts = sh.getPhysicalNumberOfRows();


        int SCAN_ID = 0, VULNERABILITY_ID = 1;
        int SERVER_ID = 2, SERVICE_NAME = 3, SERVICE_OWNER = 4, FEATURE_ID = 5;


        for (int j = 1; j < rowCounts; j++) {


            String program = getCellValue(sh.getRow(j).getCell(ACFINDINGS.PROGRAM.getValue()));
            String executive = getCellValue(sh.getRow(j).getCell(ACFINDINGS.EXECUTIVE.getValue()));
            String serverId = getCellValue(sh.getRow(j).getCell(ACFINDINGS.ESF_SERVICE.getValue()));
            String serviceName = getCellValue(sh.getRow(j).getCell(ACFINDINGS.ESF_SERVICE_OWNER.getValue()));
            String serviceOwner = getCellValue(sh.getRow(j).getCell(ACFINDINGS.DEVICE_ID.getValue()));
            String hostOperatingSystem = getCellValue(sh.getRow(j).getCell(ACFINDINGS.HOST_OPERATING_SYSTEM.getValue()));
            String hostDNSName = getCellValue(sh.getRow(j).getCell(ACFINDINGS.HOST_DNS_NAME.getValue()));
            String findingId = getCellValue(sh.getRow(j).getCell(ACFINDINGS.FINDING_ID.getValue()));
            String findingName = getCellValue(sh.getRow(j).getCell(ACFINDINGS.FINDING_NAME.getValue()));
            String findingStatus = getCellValue(sh.getRow(j).getCell(ACFINDINGS.FINDING_STATUS.getValue()));
            String findingSeverity = getCellValue(sh.getRow(j).getCell(ACFINDINGS.FINDING_SEVERITY.getValue()));
            String hostIPAddress = getCellValue(sh.getRow(j).getCell(ACFINDINGS.HOST_IP_ADDRESS.getValue()));
            String networkPort = getCellValue(sh.getRow(j).getCell(ACFINDINGS.NETWORK_PORT.getValue()));
            String firstPublished = getCellValue(sh.getRow(j).getCell(ACFINDINGS.FIRST_PUBLISHED.getValue()));
            String findingDueDate = getCellValue(sh.getRow(j).getCell(ACFINDINGS.FINDING_DUE_DATE.getValue()));
            String vulnerabilityAge = getCellValue(sh.getRow(j).getCell(ACFINDINGS.VULNERABILITY_AGE.getValue()));
            String daysOverdue = getCellValue(sh.getRow(j).getCell(ACFINDINGS.DAYS_OVERDUE.getValue()));
            String findingOverdue = getCellValue(sh.getRow(j).getCell(ACFINDINGS.FINDING_OVERDUE.getValue()));
            String overdueScore = getCellValue(sh.getRow(j).getCell(ACFINDINGS.OVERDUE_SCORE.getValue()));
            String findingEvidence = getCellValue(sh.getRow(j).getCell(ACFINDINGS.FINDING_EVIDENCE.getValue()));
            String location = getCellValue(sh.getRow(j).getCell(ACFINDINGS.LOCATION.getValue()));
            String env = getCellValue(sh.getRow(j).getCell(ACFINDINGS.ENV.getValue()));
            String featureId = getCellValue(sh.getRow(j).getCell(ACFINDINGS.FEATURE_ID.getValue()));
            String dateSubmitted = getCellValue(sh.getRow(j).getCell(ACFINDINGS.DATE_SUBMITTED.getValue()));
            String comment = getCellValue(sh.getRow(j).getCell(ACFINDINGS.COMMENT.getValue()));


            VRow v = new VRow();
            v.setProgram(program);
            v.setExecutive(executive);
            v.setServerId(serverId);
            v.setServiceName(serviceName);
            v.setServiceOwner(serviceOwner);
            v.setHostOperatingSystem(hostOperatingSystem);
            v.setHostDNSName(hostDNSName);
            v.setFindingId(findingId);
            v.setFindingName(findingName);
            v.setFindingStatus(findingStatus);
            v.setFindingSeverity(findingSeverity);
            v.setHostIPAddress(hostIPAddress);
            v.setNetworkPort(networkPort);
            v.setFirstPublished(firstPublished);
            v.setFindingDueDate(findingDueDate);
            v.setVulnerabilityAge(vulnerabilityAge);
            v.setDaysOverdue(daysOverdue);
            v.setFindindOverdue(findingOverdue);
            v.setOverdueScore(overdueScore);
            v.setFindingEvidence(findingEvidence);
            v.setLocation(location);
            v.setEnv(env);
            v.setFeatureId(featureId);
            v.setDateSubmitted(dateSubmitted);
            v.setComments(comment);

            allRows.add(v);

            System.out.println(v);

        }
        return allRows;
    }
}
