import java.util.*;

import org.apache.commons.codec.binary.StringUtils;
import org.apache.commons.collections4.map.HashedMap;
import org.apache.poi.ss.usermodel.Sheet;
import java.io.File;

import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.usermodel.WorkbookFactory;
import valueobjects.Row;
import valueobjects.RowIndex;
//import org.testing.Assert;
import java.util.*;

import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellType;
import org.apache.poi.ss.usermodel.DataFormatter;
import org.apache.poi.ss.usermodel.DateUtil;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;



/**
 * Created by tsomal on 2/22/21.
 */
public class ExcelFileUtil {

    public static Workbook getWorkBook( String fileName ) {
        String excelDir = System.getProperty("user.dir") + "//src//main//resources//exceldocs//";



        //System.out.println(excelDir);

        try {
            Workbook wb = WorkbookFactory.create(new File(excelDir + fileName));
            return wb;

        } catch (Exception ex) {
            throw new RuntimeException(ex);

        }
    }

    public static Sheet getSheet( String excelFile, String sheetName) {
        Workbook vulnerabilities = ExcelFileUtil.getWorkBook(excelFile);
        List<String> sheetNames = ExcelFileUtil.getSheets(vulnerabilities);
        System.out.print(sheetNames);
        return vulnerabilities.getSheet(sheetName);

    }


    private static String getCellValue(Cell cell) {

        CellType cellType = cell.getCellType();

            switch (cellType)
            {
                case NUMERIC:
                    return String.valueOf(cell.getNumericCellValue());
                case BOOLEAN:
                    return String.valueOf(cell.getBooleanCellValue());
                case STRING:
                    return cell.getStringCellValue();
                default:
                    return "";
            }

    }

    public static Map<RowIndex, Row> getAllRowsFromMasterMapper( Sheet sh) {

        Map<RowIndex, Row> allRows = new HashedMap<RowIndex, Row>();
        int rowCounts = sh.getPhysicalNumberOfRows();

        int SCAN_ID =0, VULNERABILITY_ID = 1; int SERVER_ID = 2,SERVICE_NAME = 3,SERVICE_OWNER = 4,FEATURE_ID = 5;

        for (int j = 1; j < rowCounts; j++) {

              String scanId = getCellValue(sh.getRow(j).getCell(SCAN_ID));
              String vulnerabilityId = getCellValue(sh.getRow(j).getCell(VULNERABILITY_ID));
              String serverId = getCellValue(sh.getRow(j).getCell(SERVER_ID));
              String serviceName = getCellValue(sh.getRow(j).getCell(SERVICE_NAME));
            String serviceOwner = getCellValue(sh.getRow(j).getCell(SERVICE_OWNER));
           String featureId = getCellValue(sh.getRow(j).getCell(FEATURE_ID));

            RowIndex k = new RowIndex();
            k.setScanId(scanId);
            k.setVulnerabilityId(vulnerabilityId);

            Row v = new Row();
            v.setScanId(scanId);
            v.setVulnerabilityId(vulnerabilityId);
            v.setServerId(serverId);
            v.setServiceOwner(serviceName);
            v.setServiceOwner(serviceOwner);
            v.setFeatureId(featureId);

             allRows.put(k,v);

           }
           return allRows;
    }










    public static List<String>  getSheets( Workbook wb) {

        List<String> sheetsNames = new ArrayList();
        int sheetsInWorkbook = wb.getNumberOfSheets();
        for (int i = 0; i < sheetsInWorkbook; i++) {
            // Retrieving sheet names from both work books and adding to different lists
            sheetsNames.add(wb.getSheetName(i));
        }
        return sheetsNames;
    }

    public static void compareWorkkbookSheets( Workbook wb1, Workbook wb2 ) {
        int sheetsInWorkbook1 = wb1.getNumberOfSheets();
        int sheetsInWorkbook2 = wb2.getNumberOfSheets();
//
//        Assert.assertEquals(sheetsInWorkbook1, sheetsInWorkbook2,
//                "Excel work books have different number of sheets. \n "
//                        + "Sheets in work book 1 : "+sheetsInWorkbook1 +"\n "
//                        + "Number of sheets in work book 2 : "+sheetsInWorkbook2);
//        // Printing number of sheets in each work book
        System.out.println("Sheets in first work book : "+sheetsInWorkbook1);
        System.out.println("Sheets in second work book : "+sheetsInWorkbook2);
    }

//    public static Map<String, Product> loadByProduct( Sheet sh) {
//        int rowCounts = sh.getPhysicalNumberOfRows();
//        Map<String, Product> productList = new HashMap<String, Product>();
//        int SERVICE_NAME = 0;
//
//        for (int j = 1; j < rowCounts; j++) {
//            String serviceName = sh.getRow(j).getCell(SERVICE_NAME).getStringCellValue();
//
//            if (!productList.containsKey(serviceName)) {
//                productList.put(serviceName, loadProduct(sh, serviceName));
//            }
//        }
//
//    }

//    private static Product loadProduct( Sheet sh, String serviceName ) {
//        Product p = new Product();
//
//        for (int j = 1; j < rowCounts; j++) {
//            String serviceOwner = sh.getRow(j).getCell(1).getStringCellValue();
//            String serverName = sh.getRow(j).getCell(2).getStringCellValue();
//        }
//
//    }

//}

//    public static void printByService(Sheet sh, String service) {
//        int rowCounts = sh.getPhysicalNumberOfRows();
//        System.out.println("Server Names By Service: " + service );
//        for (int j = 1; j < rowCounts; j++) {
//            Cell serviceName = sh.getRow(j).getCell(0);
//            String serviceNameValue = serviceName.getStringCellValue();
//            if (serviceNameValue.equals(service)) {
//                Cell serviceOwner = sh.getRow(j).getCell(1);
//                Cell serverName = sh.getRow(j).getCell(2);
//                String serviceOwnerValue = serviceOwner.getStringCellValue();
//                String serverNameValue = serverName.getStringCellValue();
//
//
//                System.out.println(serverName + " -> " +serviceOwner);
//            }
//        }
//    }












//    public static void verifyDataInExcelBookAllSheets(Workbook workbook1, Workbook workbook2) {
//        System.out.println("Verifying if both work books have same data.............");
//        // Since we have already verified that both work books have same number of sheets so iteration can be done against any workbook sheet count
//        int sheetCounts = workbook1.getNumberOfSheets();
//        // So we will iterate through sheet by sheet
//        for (int i = 0; i < sheetCounts; i++) {
//            // Get sheet at same index of both work books
//            Sheet s1 = workbook1.getSheetAt(i);
//            Sheet s2 = workbook2.getSheetAt(i);
//            System.out.println("*********** Sheet Name : " + s1.getSheetName() + "*************");
//            // Iterating through each row
//            int rowCounts = s1.getPhysicalNumberOfRows();
//            for (int j = 0; j < rowCounts; j++) {
//                // Iterating through each cell
//                int cellCounts = s1.getRow(j).getPhysicalNumberOfCells();
//                for (int k = 0; k < cellCounts; k++) {
//                    // Getting individual cell
//                    Cell c1 = s1.getRow(j).getCell(k);
//                    Cell c2 = s2.getRow(j).getCell(k);
//                    // Since cell have types and need o use different methods
//                    if (c1.getCellType().equals(c2.getCellType())) {
//                        if (c1.getCellType() == CellType.STRING) {
//                            String v1 = c1.getStringCellValue();
//                            String v2 = c2.getStringCellValue();
//                            // Assert.assertEquals(v1, v2, "Cell values are different.....");
//                            System.out.println("Its matched : " + v1 + " === " + v2);
//                        }
//                        if (c1.getCellType() == CellType.NUMERIC) {
//                            // If cell type is numeric, we need to check if data is of Date type
//                            if (DateUtil.isCellDateFormatted(c1) | DateUtil.isCellDateFormatted(c2)) {
//                                // Need to use DataFormatter to get data in given style otherwise it will come as time stamp
//                                DataFormatter df = new DataFormatter();
//                                String v1 = df.formatCellValue(c1);
//                                String v2 = df.formatCellValue(c2);
//                                //   Assert.assertEquals(v1, v2, "Cell values are different.....");
//                                System.out.println("Its matched : " + v1 + " === " + v2);
//                            } else {
//                                double v1 = c1.getNumericCellValue();
//                                double v2 = c2.getNumericCellValue();
//                                //   Assert.assertEquals(v1, v2, "Cell values are different.....");
//                                System.out.println("Its matched : " + v1 + " === " + v2);
//                            }
//                        }
//                        if (c1.getCellType() == CellType.BOOLEAN) {
//                            boolean v1 = c1.getBooleanCellValue();
//                            boolean v2 = c2.getBooleanCellValue();
//                            //   Assert.assertEquals(v1, v2, "Cell values are different.....");
//                            System.out.println("Its matched : " + v1 + " === " + v2);
//                        }
//                    } else {
//                        // If cell types are not same, exit comparison
//                        //  Assert.fail("Non matching cell type.");
//                    }
//                }
//            }
//        }
//    }
}
